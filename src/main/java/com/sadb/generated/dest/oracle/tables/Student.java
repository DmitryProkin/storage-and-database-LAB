/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.dest.oracle.tables;


import com.sadb.generated.dest.oracle.Indexes;
import com.sadb.generated.dest.oracle.Keys;
import com.sadb.generated.dest.oracle.Public;
import com.sadb.generated.dest.oracle.tables.records.StudentRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = -42443739;

    /**
     * The reference instance of <code>public.student</code>
     */
    public static final Student STUDENT = new Student();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>public.student.id</code>.
     */
    public final TableField<StudentRecord, BigDecimal> ID = createField("ID", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.student.name</code>.
     */
    public final TableField<StudentRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.student.surname</code>.
     */
    public final TableField<StudentRecord, String> SURNAME = createField("SURNAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.student.second_name</code>.
     */
    public final TableField<StudentRecord, String> SECOND_NAME = createField("SECOND_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.student.university</code>.
     */
    public final TableField<StudentRecord, String> UNIVERSITY = createField("UNIVERSITY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student.education_place</code>.
     */
    public final TableField<StudentRecord, String> EDUCATION_PLACE = createField("EDUCATION_PLACE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student.speciality</code>.
     */
    public final TableField<StudentRecord, String> SPECIALITY = createField("SPECIALITY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student.semester</code>.
     */
    public final TableField<StudentRecord, BigDecimal> SEMESTER = createField("SEMESTER", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.student.creation_date</code>.
     */
    public final TableField<StudentRecord, Timestamp> CREATION_DATE = createField("CREATION_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.student.updation_date</code>.
     */
    public final TableField<StudentRecord, Timestamp> UPDATION_DATE = createField("UPDATION_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.student.concession</code>.
     */
    public final TableField<StudentRecord, Boolean> CONCESSION = createField("CONCESSION", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.student.room_id</code>.
     */
    public final TableField<StudentRecord, Integer> ROOM_ID = createField("ROOM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.student.date_checkin</code>.
     */
    public final TableField<StudentRecord, Date> DATE_CHECKIN = createField("DATE_CHECKIN", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.student.date_checkout</code>.
     */
    public final TableField<StudentRecord, Date> DATE_CHECKOUT = createField("DATE_CHECKOUT", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.student.form_education</code>.
     */
    public final TableField<StudentRecord, Integer> FORM_EDUCATION = createField("FORM_EDUCATION", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.student.position_id</code>.
     */
    public final TableField<StudentRecord, Integer> POSITION_ID = createField("POSITION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.student.group_id</code>.
     */
    public final TableField<StudentRecord, Integer> GROUP_ID = createField("GROUP_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.student.birth_date</code>.
     */
    public final TableField<StudentRecord, Timestamp> BIRTH_DATE = createField("BIRTH_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.student.birth_place</code>.
     */
    public final TableField<StudentRecord, String> BIRTH_PLACE = createField("BIRTH_PLACE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.student</code> table reference
     */
    public Student() {
        this(DSL.name("STUDENT"), null);
    }

    /**
     * Create an aliased <code>public.student</code> table reference
     */
    public Student(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>public.student</code> table reference
     */
    public Student(Name alias) {
        this(alias, STUDENT);
    }

    private Student(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Student(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Student(Table<O> child, ForeignKey<O, StudentRecord> key) {
        super(child, key, STUDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUDENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentRecord> getPrimaryKey() {
        return Keys.STUDENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentRecord>>asList(Keys.STUDENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentRecord, ?>>asList(Keys.STUDENT__STUDENT_FK0, Keys.STUDENT__STUDENT_FK1, Keys.STUDENT__PARTICIPANT_FK0, Keys.STUDENT__R_28);
    }

    public Room room() {
        return new Room(this, Keys.STUDENT__STUDENT_FK0);
    }

    public FormEducation formEducation() {
        return new FormEducation(this, Keys.STUDENT__STUDENT_FK1);
    }

    public TypePosition typePosition() {
        return new TypePosition(this, Keys.STUDENT__PARTICIPANT_FK0);
    }

    public Groups groups() {
        return new Groups(this, Keys.STUDENT__R_28);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(String alias) {
        return new Student(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(Name alias) {
        return new Student(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(String name) {
        return new Student(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(Name name) {
        return new Student(name, null);
    }
}
