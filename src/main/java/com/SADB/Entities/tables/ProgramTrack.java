/*
 * This file is generated by jOOQ.
 */
package com.SADB.Entities.tables;


import com.SADB.Entities.Indexes;
import com.SADB.Entities.Keys;
import com.SADB.Entities.Public;
import com.SADB.Entities.tables.records.ProgramTrackRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProgramTrack extends TableImpl<ProgramTrackRecord> {

    private static final long serialVersionUID = 2126363986;

    /**
     * The reference instance of <code>public.program_track</code>
     */
    public static final ProgramTrack PROGRAM_TRACK = new ProgramTrack();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProgramTrackRecord> getRecordType() {
        return ProgramTrackRecord.class;
    }

    /**
     * The column <code>public.program_track.prog_id</code>.
     */
    public final TableField<ProgramTrackRecord, Integer> PROG_ID = createField("prog_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.program_track.fac_id</code>.
     */
    public final TableField<ProgramTrackRecord, Integer> FAC_ID = createField("fac_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.program_track.progm_name</code>.
     */
    public final TableField<ProgramTrackRecord, String> PROGM_NAME = createField("progm_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.program_track.program_track_num</code>.
     */
    public final TableField<ProgramTrackRecord, String> PROGRAM_TRACK_NUM = createField("program_track_num", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.program_track.progm_type</code>.
     */
    public final TableField<ProgramTrackRecord, String> PROGM_TYPE = createField("progm_type", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.program_track.creat_time</code>.
     */
    public final TableField<ProgramTrackRecord, Timestamp> CREAT_TIME = createField("creat_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.program_track.update_time</code>.
     */
    public final TableField<ProgramTrackRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.program_track</code> table reference
     */
    public ProgramTrack() {
        this(DSL.name("program_track"), null);
    }

    /**
     * Create an aliased <code>public.program_track</code> table reference
     */
    public ProgramTrack(String alias) {
        this(DSL.name(alias), PROGRAM_TRACK);
    }

    /**
     * Create an aliased <code>public.program_track</code> table reference
     */
    public ProgramTrack(Name alias) {
        this(alias, PROGRAM_TRACK);
    }

    private ProgramTrack(Name alias, Table<ProgramTrackRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProgramTrack(Name alias, Table<ProgramTrackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProgramTrack(Table<O> child, ForeignKey<O, ProgramTrackRecord> key) {
        super(child, key, PROGRAM_TRACK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XPK_PROGRAM_TRACK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProgramTrackRecord> getPrimaryKey() {
        return Keys.XPK_PROGRAM_TRACK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProgramTrackRecord>> getKeys() {
        return Arrays.<UniqueKey<ProgramTrackRecord>>asList(Keys.XPK_PROGRAM_TRACK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProgramTrackRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProgramTrackRecord, ?>>asList(Keys.PROGRAM_TRACK__R_4);
    }

    public Faculty faculty() {
        return new Faculty(this, Keys.PROGRAM_TRACK__R_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProgramTrack as(String alias) {
        return new ProgramTrack(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProgramTrack as(Name alias) {
        return new ProgramTrack(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgramTrack rename(String name) {
        return new ProgramTrack(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgramTrack rename(Name name) {
        return new ProgramTrack(name, null);
    }
}
