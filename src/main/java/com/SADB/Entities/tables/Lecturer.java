/*
 * This file is generated by jOOQ.
 */
package com.SADB.Entities.tables;


import com.SADB.Entities.Indexes;
import com.SADB.Entities.Keys;
import com.SADB.Entities.Public;
import com.SADB.Entities.tables.records.LecturerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lecturer extends TableImpl<LecturerRecord> {

    private static final long serialVersionUID = 1761503771;

    /**
     * The reference instance of <code>public.lecturer</code>
     */
    public static final Lecturer LECTURER = new Lecturer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LecturerRecord> getRecordType() {
        return LecturerRecord.class;
    }

    /**
     * The column <code>public.lecturer.lec_id</code>.
     */
    public final TableField<LecturerRecord, Integer> LEC_ID = createField("lec_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lecturer.second_name</code>.
     */
    public final TableField<LecturerRecord, String> SECOND_NAME = createField("second_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lecturer.first_name</code>.
     */
    public final TableField<LecturerRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lecturer.patronymic_name</code>.
     */
    public final TableField<LecturerRecord, String> PATRONYMIC_NAME = createField("patronymic_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lecturer.birth_date</code>.
     */
    public final TableField<LecturerRecord, Timestamp> BIRTH_DATE = createField("birth_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.lecturer.birth_place</code>.
     */
    public final TableField<LecturerRecord, String> BIRTH_PLACE = createField("birth_place", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lecturer.post</code>.
     */
    public final TableField<LecturerRecord, String> POST = createField("post", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lecturer.work_period_from</code>.
     */
    public final TableField<LecturerRecord, Timestamp> WORK_PERIOD_FROM = createField("work_period_from", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.lecturer.work_period_to</code>.
     */
    public final TableField<LecturerRecord, Timestamp> WORK_PERIOD_TO = createField("work_period_to", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.lecturer.creat_time</code>.
     */
    public final TableField<LecturerRecord, Timestamp> CREAT_TIME = createField("creat_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.lecturer.update_time</code>.
     */
    public final TableField<LecturerRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.lecturer</code> table reference
     */
    public Lecturer() {
        this(DSL.name("lecturer"), null);
    }

    /**
     * Create an aliased <code>public.lecturer</code> table reference
     */
    public Lecturer(String alias) {
        this(DSL.name(alias), LECTURER);
    }

    /**
     * Create an aliased <code>public.lecturer</code> table reference
     */
    public Lecturer(Name alias) {
        this(alias, LECTURER);
    }

    private Lecturer(Name alias, Table<LecturerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lecturer(Name alias, Table<LecturerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Lecturer(Table<O> child, ForeignKey<O, LecturerRecord> key) {
        super(child, key, LECTURER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XPK_LECTURER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LecturerRecord> getPrimaryKey() {
        return Keys.XPK_LECTURER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LecturerRecord>> getKeys() {
        return Arrays.<UniqueKey<LecturerRecord>>asList(Keys.XPK_LECTURER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lecturer as(String alias) {
        return new Lecturer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lecturer as(Name alias) {
        return new Lecturer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lecturer rename(String name) {
        return new Lecturer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lecturer rename(Name name) {
        return new Lecturer(name, null);
    }
}
