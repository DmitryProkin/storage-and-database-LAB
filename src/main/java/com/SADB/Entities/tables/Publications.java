/*
 * This file is generated by jOOQ.
 */
package com.SADB.Entities.tables;


import com.SADB.Entities.Indexes;
import com.SADB.Entities.Keys;
import com.SADB.Entities.Public;
import com.SADB.Entities.tables.records.PublicationsRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publications extends TableImpl<PublicationsRecord> {

    private static final long serialVersionUID = -727498342;

    /**
     * The reference instance of <code>public.publications</code>
     */
    public static final Publications PUBLICATIONS = new Publications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicationsRecord> getRecordType() {
        return PublicationsRecord.class;
    }

    /**
     * The column <code>public.publications.id</code>.
     */
    public final TableField<PublicationsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('publications_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.publications.title_edition</code>.
     */
    public final TableField<PublicationsRecord, String> TITLE_EDITION = createField("title_edition", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.publications.language_publication</code>.
     */
    public final TableField<PublicationsRecord, String> LANGUAGE_PUBLICATION = createField("language_publication", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.publications.volume_edition</code>.
     */
    public final TableField<PublicationsRecord, String> VOLUME_EDITION = createField("volume_edition", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.publications.place_editon</code>.
     */
    public final TableField<PublicationsRecord, String> PLACE_EDITON = createField("place_editon", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.publications.edition_id</code>.
     */
    public final TableField<PublicationsRecord, Integer> EDITION_ID = createField("edition_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.publications.co_authors</code>.
     */
    public final TableField<PublicationsRecord, String> CO_AUTHORS = createField("co_authors", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.publications.citation_index</code>.
     */
    public final TableField<PublicationsRecord, Double> CITATION_INDEX = createField("citation_index", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.publications.data_publication</code>.
     */
    public final TableField<PublicationsRecord, Date> DATA_PUBLICATION = createField("data_publication", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.publications.participant_id</code>.
     */
    public final TableField<PublicationsRecord, Integer> PARTICIPANT_ID = createField("participant_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.publications.id_type_publication</code>.
     */
    public final TableField<PublicationsRecord, Integer> ID_TYPE_PUBLICATION = createField("id_type_publication", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.publications.data_update</code>.
     */
    public final TableField<PublicationsRecord, Timestamp> DATA_UPDATE = createField("data_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.publications.data_create</code>.
     */
    public final TableField<PublicationsRecord, Timestamp> DATA_CREATE = createField("data_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.publications</code> table reference
     */
    public Publications() {
        this(DSL.name("publications"), null);
    }

    /**
     * Create an aliased <code>public.publications</code> table reference
     */
    public Publications(String alias) {
        this(DSL.name(alias), PUBLICATIONS);
    }

    /**
     * Create an aliased <code>public.publications</code> table reference
     */
    public Publications(Name alias) {
        this(alias, PUBLICATIONS);
    }

    private Publications(Name alias, Table<PublicationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publications(Name alias, Table<PublicationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Publications(Table<O> child, ForeignKey<O, PublicationsRecord> key) {
        super(child, key, PUBLICATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PUBLICATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PublicationsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PUBLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PublicationsRecord> getPrimaryKey() {
        return Keys.PUBLICATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PublicationsRecord>> getKeys() {
        return Arrays.<UniqueKey<PublicationsRecord>>asList(Keys.PUBLICATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PublicationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PublicationsRecord, ?>>asList(Keys.PUBLICATIONS__PUBLICATIONS_FK0, Keys.PUBLICATIONS__PUBLICATIONS_FK1, Keys.PUBLICATIONS__PUBLICATIONS_FK2);
    }

    public TypeEdition typeEdition() {
        return new TypeEdition(this, Keys.PUBLICATIONS__PUBLICATIONS_FK0);
    }

    public Student student() {
        return new Student(this, Keys.PUBLICATIONS__PUBLICATIONS_FK1);
    }

    public TypePublication typePublication() {
        return new TypePublication(this, Keys.PUBLICATIONS__PUBLICATIONS_FK2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Publications as(String alias) {
        return new Publications(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Publications as(Name alias) {
        return new Publications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publications rename(String name) {
        return new Publications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publications rename(Name name) {
        return new Publications(name, null);
    }
}
