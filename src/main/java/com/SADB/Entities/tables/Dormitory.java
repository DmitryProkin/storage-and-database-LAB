/*
 * This file is generated by jOOQ.
 */
package com.SADB.Entities.tables;


import com.SADB.Entities.Indexes;
import com.SADB.Entities.Keys;
import com.SADB.Entities.Public;
import com.SADB.Entities.tables.records.DormitoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dormitory extends TableImpl<DormitoryRecord> {

    private static final long serialVersionUID = 1304311482;

    /**
     * The reference instance of <code>public.dormitory</code>
     */
    public static final Dormitory DORMITORY = new Dormitory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DormitoryRecord> getRecordType() {
        return DormitoryRecord.class;
    }

    /**
     * The column <code>public.dormitory.id</code>.
     */
    public final TableField<DormitoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dormitory_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dormitory.name</code>.
     */
    public final TableField<DormitoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dormitory.address</code>.
     */
    public final TableField<DormitoryRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dormitory.date_update</code>.
     */
    public final TableField<DormitoryRecord, Timestamp> DATE_UPDATE = createField("date_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.dormitory.date_create</code>.
     */
    public final TableField<DormitoryRecord, Timestamp> DATE_CREATE = createField("date_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.dormitory</code> table reference
     */
    public Dormitory() {
        this(DSL.name("dormitory"), null);
    }

    /**
     * Create an aliased <code>public.dormitory</code> table reference
     */
    public Dormitory(String alias) {
        this(DSL.name(alias), DORMITORY);
    }

    /**
     * Create an aliased <code>public.dormitory</code> table reference
     */
    public Dormitory(Name alias) {
        this(alias, DORMITORY);
    }

    private Dormitory(Name alias, Table<DormitoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dormitory(Name alias, Table<DormitoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dormitory(Table<O> child, ForeignKey<O, DormitoryRecord> key) {
        super(child, key, DORMITORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DORMITORY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DormitoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DORMITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DormitoryRecord> getPrimaryKey() {
        return Keys.DORMITORY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DormitoryRecord>> getKeys() {
        return Arrays.<UniqueKey<DormitoryRecord>>asList(Keys.DORMITORY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dormitory as(String alias) {
        return new Dormitory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dormitory as(Name alias) {
        return new Dormitory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dormitory rename(String name) {
        return new Dormitory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dormitory rename(Name name) {
        return new Dormitory(name, null);
    }
}
