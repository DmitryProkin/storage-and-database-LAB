/*
 * This file is generated by jOOQ.
 */
package com.SADB.Entities.tables;


import com.SADB.Entities.Indexes;
import com.SADB.Entities.Keys;
import com.SADB.Entities.Public;
import com.SADB.Entities.tables.records.ResultsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Results extends TableImpl<ResultsRecord> {

    private static final long serialVersionUID = 2061884157;

    /**
     * The reference instance of <code>public.results</code>
     */
    public static final Results RESULTS = new Results();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsRecord> getRecordType() {
        return ResultsRecord.class;
    }

    /**
     * The column <code>public.results.result</code>.
     */
    public final TableField<ResultsRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.results.ex_type</code>.
     */
    public final TableField<ResultsRecord, String> EX_TYPE = createField("ex_type", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.results.discipline_id</code>.
     */
    public final TableField<ResultsRecord, Integer> DISCIPLINE_ID = createField("discipline_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.results.result_date</code>.
     */
    public final TableField<ResultsRecord, Timestamp> RESULT_DATE = createField("result_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.results.result_eu</code>.
     */
    public final TableField<ResultsRecord, String> RESULT_EU = createField("result_eu", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.results.academ_year_id</code>.
     */
    public final TableField<ResultsRecord, Integer> ACADEM_YEAR_ID = createField("academ_year_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.results.result_id</code>.
     */
    public final TableField<ResultsRecord, Integer> RESULT_ID = createField("result_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.results.student_id</code>.
     */
    public final TableField<ResultsRecord, Integer> STUDENT_ID = createField("student_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.results.creat_time</code>.
     */
    public final TableField<ResultsRecord, Timestamp> CREAT_TIME = createField("creat_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.results.update_time</code>.
     */
    public final TableField<ResultsRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.results.teacher_id</code>.
     */
    public final TableField<ResultsRecord, Integer> TEACHER_ID = createField("teacher_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.results</code> table reference
     */
    public Results() {
        this(DSL.name("results"), null);
    }

    /**
     * Create an aliased <code>public.results</code> table reference
     */
    public Results(String alias) {
        this(DSL.name(alias), RESULTS);
    }

    /**
     * Create an aliased <code>public.results</code> table reference
     */
    public Results(Name alias) {
        this(alias, RESULTS);
    }

    private Results(Name alias, Table<ResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Results(Name alias, Table<ResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Results(Table<O> child, ForeignKey<O, ResultsRecord> key) {
        super(child, key, RESULTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XPK_RESULTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResultsRecord> getPrimaryKey() {
        return Keys.XPK_RESULTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResultsRecord>> getKeys() {
        return Arrays.<UniqueKey<ResultsRecord>>asList(Keys.XPK_RESULTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResultsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResultsRecord, ?>>asList(Keys.RESULTS__R_18, Keys.RESULTS__R_31, Keys.RESULTS__R_17, Keys.RESULTS__RESULTS_FK1);
    }

    public Discipline discipline() {
        return new Discipline(this, Keys.RESULTS__R_18);
    }

    public AcademicYear academicYear() {
        return new AcademicYear(this, Keys.RESULTS__R_31);
    }

    public Student student() {
        return new Student(this, Keys.RESULTS__R_17);
    }

    public Lecturer lecturer() {
        return new Lecturer(this, Keys.RESULTS__RESULTS_FK1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Results as(String alias) {
        return new Results(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Results as(Name alias) {
        return new Results(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(String name) {
        return new Results(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(Name name) {
        return new Results(name, null);
    }
}
