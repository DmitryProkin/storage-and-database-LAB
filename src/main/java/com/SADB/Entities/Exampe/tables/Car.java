/*
 * This file is generated by jOOQ.
 */
package com.SADB.Entities.Exampe.tables;


import com.SADB.Entities.Exampe.Indexes;
import com.SADB.Entities.Exampe.Keys;
import com.SADB.Entities.Exampe.Public;
import com.SADB.Entities.Exampe.tables.records.CarRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Car extends TableImpl<CarRecord> {

    private static final long serialVersionUID = 824503997;

    /**
     * The reference instance of <code>public.car</code>
     */
    public static final Car CAR = new Car();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarRecord> getRecordType() {
        return CarRecord.class;
    }

    /**
     * The column <code>public.car.id</code>.
     */
    public final TableField<CarRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('car_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.car.name</code>.
     */
    public final TableField<CarRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.car.length</code>.
     */
    public final TableField<CarRecord, Integer> LENGTH = createField("length", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.car.width</code>.
     */
    public final TableField<CarRecord, Integer> WIDTH = createField("width", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.car.height</code>.
     */
    public final TableField<CarRecord, Integer> HEIGHT = createField("height", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.car.wheelbase</code>.
     */
    public final TableField<CarRecord, Integer> WHEELBASE = createField("wheelbase", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.car.volume</code>.
     */
    public final TableField<CarRecord, Integer> VOLUME = createField("volume", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.car.power</code>.
     */
    public final TableField<CarRecord, Integer> POWER = createField("power", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.car</code> table reference
     */
    public Car() {
        this(DSL.name("car"), null);
    }

    /**
     * Create an aliased <code>public.car</code> table reference
     */
    public Car(String alias) {
        this(DSL.name(alias), CAR);
    }

    /**
     * Create an aliased <code>public.car</code> table reference
     */
    public Car(Name alias) {
        this(alias, CAR);
    }

    private Car(Name alias, Table<CarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Car(Name alias, Table<CarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Car(Table<O> child, ForeignKey<O, CarRecord> key) {
        super(child, key, CAR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CAR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CarRecord, Long> getIdentity() {
        return Keys.IDENTITY_CAR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CarRecord> getPrimaryKey() {
        return Keys.CAR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CarRecord>> getKeys() {
        return Arrays.<UniqueKey<CarRecord>>asList(Keys.CAR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Car as(String alias) {
        return new Car(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Car as(Name alias) {
        return new Car(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(String name) {
        return new Car(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(Name name) {
        return new Car(name, null);
    }
}
